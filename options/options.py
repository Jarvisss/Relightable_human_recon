import argparse

def get_options():
    parser = argparse.ArgumentParser()

    '''Common options'''
    parser.add_argument('--phase',  type=str,default='train',  help='train|test')
    parser.add_argument('--id', type=str, default='default', help = 'experiment ID. the experiment dir will be set as "./checkpoint/id/"')
    parser.add_argument('--seed', type=int, default=1995, help = 'random seed')
    parser.add_argument('--gpu', type=int, default=0, help='gpu id')
    parser.add_argument('--batch_size', type=int, default=2, help='batch size')
    parser.add_argument('--root_dir',type=str, default='/home/lujiawei/workspace/tex2cloth')
    parser.add_argument('--finetune_real_data_train_dir',type=str, default='/home/lujiawei/workspace/tex2cloth')
    parser.add_argument('--finetune_real_data_test_dir',type=str, default='/home/lujiawei/workspace/tex2cloth')
    parser.add_argument('--path_to_dataset',type=str, default='/home/lujiawei/workspace/dataset/thuman2')
    parser.add_argument('--path_to_taichi_render',type=str, default='/home/lujiawei/workspace/dataset/thuman2')
    parser.add_argument('--path_to_dr_dataset',type=str, default='/home/lujiawei/workspace/dataset/thuman2')
    parser.add_argument('--path_to_obj',type=str, default='/mnt/data1/lujiawei/thuman2_rescaled_unit_sphere')
    parser.add_argument('--path_to_sample_pts',type=str, default='/home/lujiawei/workspace/dataset/SAMPLE_PT')
    parser.add_argument('--path_to_SMPL',type=str, default='/home/lujiawei/workspace/dataset/scale_y')
    parser.add_argument('--path_to_SMPL_joints',type=str, default='/mnt/data1/lujiawei/thuman2_rescaled_unit_sphere_2')
    parser.add_argument('--align_corner', action='store_true', help='behaviour in pytorch grid_sample, before torch=1.2.0 is default True, after 1.2.0 is default False')
    parser.add_argument('--uv', action='store_true')

    '''Train options'''
    parser.add_argument('--num_views', type=int, default=1, help='num of input views')
    parser.add_argument('--num_target', type=int, default=12, help='num of target views')
    parser.add_argument('--patch_size', type=int, default=65, help='patch size for differentiable rendering')
    parser.add_argument('--epochs', type=int, default=500, help='num epochs')
    parser.add_argument('--epochs_warm_up', type=int, default=100, help='num epochs')
    parser.add_argument('--num_workers', type=int, default=1, help='num of workers')
    parser.add_argument('--load_pretrained_path', type=str, default=None)
    parser.add_argument('--load_coarse_ckpt_path', type=str, default=None)
    parser.add_argument('--load_pretrained_path_color', type=str, default=None)
    parser.add_argument('--use_scheduler', action='store_true', help='open this to use learning rate scheduler')
    parser.add_argument('--model_save_freq', type=int, default=5000, help='save model every # batchs')
    parser.add_argument('--gen_mesh_freq', type=int, default=1000, help='save mesh every # batchs')
    parser.add_argument('--gen_feat_freq', type=int, default=100, help='save mesh every # batchs')
    parser.add_argument('--gen_init_mesh', action='store_true')
    parser.add_argument('--render_init_imgs', action='store_true')
    parser.add_argument('--gen_vis_hull_freq', type=int, default=1000, help='save mesh every # batchs')
    parser.add_argument('--save_sample_points_freq', type=int, default=1000, help='save points every # batchs')
    parser.add_argument('--vis_sdf_normal_freq', type=int, default=0, help='save points every # batchs')
    parser.add_argument('--test_freq', type=int, default=1, help='test model every # epochs')
    parser.add_argument('--img_save_freq', type=int, default=200, help='save image every # iters')
    parser.add_argument('--continue_train', action='store_true')
    parser.add_argument('--no_grad', action='store_true')
    parser.add_argument('--cal_indirect', action='store_true')
    parser.add_argument('--cal_diff_normal', action='store_true')
    parser.add_argument('--precomputed_indirect', action='store_true')
    parser.add_argument('--finetune_single', action='store_true')
    parser.add_argument('--load_exp_name', type=str, default=None)
    parser.add_argument('--tune_datatype', type=str, default='real')
    parser.add_argument('--normalize_z', action='store_true')
    parser.add_argument('--use_ggx', action='store_true')
    parser.add_argument('--use_disney', action='store_true')
    parser.add_argument('--freeze_img_filter', action='store_true')
    parser.add_argument('--freeze_sdf', action='store_true')
    parser.add_argument('--freeze_albedo', action='store_true')
    parser.add_argument('--freeze_indirect', action='store_true')

    parser.add_argument('--precompute_img_feat', action='store_true')
    parser.add_argument('--selected_train', action='store_true')
    parser.add_argument('--use_gt_intensity', action='store_true')
    parser.add_argument('--input_normal', action='store_true')
    parser.add_argument('--input_cam_normal', action='store_true')
    parser.add_argument('--input_depth', action='store_true')
    parser.add_argument('--output_direct', action='store_true')

    parser.add_argument('--visibility_save_freq', type=int, default=0, help='save points every # batchs')
    parser.add_argument('--image_proj_save_freq', type=int, default=0, help='save points every # batchs')
    parser.add_argument('--image_patch_save_freq', type=int, default=0, help='save points every # batchs')
    parser.add_argument('--render_img_freq', type=int, default=0, help='save points every # batchs')
    parser.add_argument('--export_uv', action='store_true')

    ### learning rate issue
    parser.add_argument('--lr_G', type=float, default=1e-4, help='learning rate')
    parser.add_argument('--lr_color', type=float, default=1e-3, help='learning rate')
    parser.add_argument('--lr_pose', type=float, default=1e-4, help='learning rate')
    parser.add_argument('--lr_intensity', type=float, default=1e-4, help='learning rate')
    parser.add_argument('--lr_k', type=float, default=1e-4, help='learning rate')
    parser.add_argument('--lr_C',type=float, default=1e-3, help='learning rate of color')
    parser.add_argument('--schedule', type=int, nargs='+', default=[40, 60],
                            help='Decrease learning rate at these epochs.')
    parser.add_argument('--gamma', type=float, default=0.1, help='LR is multiplied by gamma on schedule.')

    ### visualize and save 
    parser.add_argument('--no_gen_mesh', action='store_true')
    parser.add_argument('--no_num_eval', action='store_true')

    parser.add_argument('--use_TSDF',action='store_true')
    parser.add_argument('--TSDF_thres',type=float, default=0.1,)
    

    '''Data Options'''
    ### num_sample for training net

    parser.add_argument('--dataset', type=str, default='Thuman2', help='Thuman2|RP|RP_normalized')
    parser.add_argument('--subject', type=str, default='0518')
    parser.add_argument('--load_size', type=int, nargs='+', default=[512, 512])
    parser.add_argument('--target_size', type=int, default=512)
    parser.add_argument('--near', type=float, default=0.1)
    parser.add_argument('--far', type=float, default=100.0)
    parser.add_argument('--fov', type=float, default=60.0)
    parser.add_argument('--size', type=int, default=512, help='iamge resolution')
    parser.add_argument('--resolution', type=int, default=256, help='# of grid in mesh reconstruction')
    parser.add_argument('--dilate_size', type=int, default=5, help='dilate of mask to prevent undesired situations')
    parser.add_argument('--blur_target', action='store_true')
    parser.add_argument('--num_sample_inout', type=int, default=10000, help='# of sampling points')
    parser.add_argument('--num_sample_surface', type=int, default=5000, help='# of sampling points')
    parser.add_argument('--num_sample_color', type=int, default=0, help='# of sampling points for color training')
    parser.add_argument('--num_sample_dr', type=int, default=512, help='# of sampling pixels for batch-wise differentiable rendering')

    parser.add_argument('--angle_step', type=int, default=120)
    parser.add_argument('--yaw_angle_step', type=int, default=6, help='yaw angle step in dataset')
    parser.add_argument('--load_mesh_ram', action='store_true')
    parser.add_argument('--cal_vhull_intersection_online', action='store_true')
    parser.add_argument('--use_augmentation', action='store_true')
    parser.add_argument('--use_smpl', action='store_true')
    parser.add_argument('--use_spatial', action='store_true')
    parser.add_argument('--use_world_coord', action='store_true')
    parser.add_argument('--noisy_pose', action='store_true')
    parser.add_argument('--field_type', type=str, default='occupancy',  help='occupancy|sdf')

    ### augmentations for training the occ net
    parser.add_argument('--random_multiview', action='store_true', help='random select views or fix views')
    parser.add_argument('--random_aug_offset', type=int, default=0, help='random select views or fix views')
    parser.add_argument('--random_flip', action='store_true')
    parser.add_argument('--random_trans', action='store_true')
    parser.add_argument('--random_scale', action='store_true')
    parser.add_argument('--color_aug', action='store_true')
    parser.add_argument('--offline_sample', action='store_true')
    parser.add_argument('--use_gt_sdf', action='store_true')
    parser.add_argument('--truncate_sdf', action='store_true')

    parser.add_argument('--aug_blur', action='store_true')
    parser.add_argument('--pr', type=float, default=0.1, help='padding rate for training dataset')
    parser.add_argument('--sigma', type=float, default=5, help='perturbation standard deviation for positions')
    parser.add_argument('--z_size', type=float, default=200.0, help='z normalization factor')
    # parser.add_argument('--z_size', type=float, default=1.11, help='z normalization factor')

    ### augmentation for color jittering
    parser.add_argument('--aug_bri', type=float, default=0.0, help='augmentation brightness')
    parser.add_argument('--aug_con', type=float, default=0.0, help='augmentation contrast')
    parser.add_argument('--aug_sat', type=float, default=0.0, help='augmentation saturate')
    parser.add_argument('--aug_hue', type=float, default=0.0, help='augmentation hue')

    '''Model options'''
    parser.add_argument('--norm', type=str, default='group', help='normalization type in network, "group" or "batch"')
    parser.add_argument('--conv_type', type=str, default='double', help='conv type in network, "double" or "single"')
    parser.add_argument('--norm_color', type=str, default='instance', help='normalization type in network, "group" or "batch"')
    parser.add_argument('--norm_light', type=str, default='instance', help='normalization type in network, "group" or "batch"')
    parser.add_argument('--hg_padding_mode', type=str, default='zeros', help='padding type in network, "reflect" or "zeros"')
    parser.add_argument('--inplace', action='store_true')
    parser.add_argument('--hg_down', type=str, default='ave_pool', help='ave pool || conv64 || conv128')
    parser.add_argument('--hourglass_dim', type=int, default='256', help='256 | 512')
    parser.add_argument('--filter_type', type=str, default='HG', help='HG | UNet | VGG19')
    parser.add_argument('--use_transformer', action='store_true')
    parser.add_argument('--use_confidence', action='store_true')
    parser.add_argument('--use_mean_var', action='store_true')
    parser.add_argument('--use_feature_confidence', action='store_true')
    parser.add_argument('--albedo_net_use_upsample', action='store_true')
    parser.add_argument('--use_netG_feat', action='store_true')
    parser.add_argument('--pred_indirect', action='store_true')
    parser.add_argument('--padding_mode', type=str, default='reflect')
    parser.add_argument('--albedo_out_fn', type=str, default='sigmoid')
    parser.add_argument('--activation', type=str, default='LeakyReLU', help='"ReLU" or "LeakyReLU"')

    ### options of image filter
    parser.add_argument('--num_stack', type=int, default=4, help='# of hourglass')
    parser.add_argument('--num_hourglass', type=int, default=2, help='# of stacked layer of hourglass')
    parser.add_argument('--skip_hourglass', action='store_true', help='skip the HourGlass part')


    ### options of multiview transformer
    parser.add_argument('--transformer_geo_n_layers', default=2, type=int)
    parser.add_argument('--transformer_geo_n_head', default=6, type=int)
    parser.add_argument('--transformer_geo_d_k', default=32, type=int)
    parser.add_argument('--transformer_geo_d_v', default=32, type=int)
    parser.add_argument('--transformer_geo_d_model', default=257, type=int)
    parser.add_argument('--transformer_geo_d_inner', default=256, type=int)
    parser.add_argument('--transformer_geo_dropout', default=0.1, type=float)

    parser.add_argument('--transformer_tex_n_layers', default=2, type=int)
    parser.add_argument('--transformer_tex_n_head', default=6, type=int)
    parser.add_argument('--transformer_tex_d_k', default=32, type=int)
    parser.add_argument('--transformer_tex_d_v', default=32, type=int)
    parser.add_argument('--transformer_tex_d_model', default=257, type=int)
    parser.add_argument('--transformer_tex_d_inner', default=256, type=int)
    parser.add_argument('--transformer_tex_dropout', default=0.1, type=float)


    ### options of occupancy MLP
    parser.add_argument('--mlp_dim', nargs='+', default=[129, 1024, 512, 256, 128, 1], type=int, help='# of dimensions of occupancy classification mlp')
    # parser.add_argument('--mlp_dim', nargs='+', default=[257, 512, 512, 512, 512, 512, 512, 512, 512, 1], type=int, help='# of dimensions of occupancy classification mlp')
    parser.add_argument('--mlp_res_layers', nargs='+', default=[1,2,3], type=int)
    parser.add_argument('--mlp_mean_layer', default=3, type=int)

    parser.add_argument('--mlp_activation_type', type=str, default='softplus', help='"relu" or "leaky" or "silu"')
    parser.add_argument('--mlp_norm_type', type=str, default='none', help='"batch" or "group" or "instance" or "None"')
    ### options of color MLP
    parser.add_argument('--mlp_dim_albedo', nargs='+', default=[129, 1024, 512, 256, 128, 3], type=int, help='# of dimensions of color regression mlp')
    parser.add_argument('--mlp_dim_spec_albedo', nargs='+', default=[129, 1024, 512, 256, 128, 3], type=int, help='# of dimensions of color regression mlp')
    parser.add_argument('--mlp_dim_roughness', nargs='+', default=[129, 1024, 512, 256, 128, 1], type=int, help='# of dimensions of color regression mlp')
    parser.add_argument('--mlp_res_layers_albedo', nargs='+', default=[1,2,3], type=int)
    parser.add_argument('--mlp_mean_layer_albedo', default=3, type=int)
    parser.add_argument('--mlp_activation_type_albedo', type=str, default='softplus', help='"relu" or "leaky" or "silu"')
    parser.add_argument('--mlp_norm_type_albedo', type=str, default='none', help='"batch" or "group" or "instance" or "None"')

    ### options of light MLP
    parser.add_argument('--conv_dim_light', nargs='+', default=[256, 256, 128, 128, 64, 64, 32, 28], type=int, help='# of dimensions of color regression mlp')
    parser.add_argument('--mlp_dim_light', nargs='+', default=[512, 256, 128, 64, 32, 28], type=int, help='# of dimensions of color regression mlp')
    parser.add_argument('--mlp_res_layers_light', nargs='+', default=[1,2,3], type=int)
    parser.add_argument('--mlp_mean_layer_light', default=3, type=int)
    parser.add_argument('--mlp_activation_type_light', type=str, default='softplus', help='"relu" or "leaky" or "silu"')
    parser.add_argument('--mlp_norm_type_light', type=str, default='none', help='"batch" or "group" or "instance" or "None"')
    
    ## options for indirect MLP
    parser.add_argument('--mlp_dim_indirect', nargs='+', default=[260,1024,512,256,128,3], type=int)
    parser.add_argument('--mlp_res_layers_indirect', nargs='+', default=[1,2,3], type=int)
    parser.add_argument('--mlp_mean_layer_indirect', default=-1, type=int)
    parser.add_argument('--mlp_activation_type_indirect', type=str, default='softplus')
    parser.add_argument('--mlp_norm_type_indirect', type=str, default='none')

    
    parser.add_argument('--no_residual', action='store_true', help='')
    parser.add_argument('--use_visual_hull', action='store_true', help='')
    parser.add_argument('--use_perspective', action='store_true', help='')
    parser.add_argument('--use_CV_perspective', action='store_true', help='')

    # Ray tracing options
    parser.add_argument('--object_bounding_sphere', type=float, default=1)
    parser.add_argument('--line_step_iters', type=int, default=3)
    parser.add_argument('--line_search_step', type=float, default=0.5)
    # parser.add_argument('--sphere_tracing_iters', type=int, default=15)
    parser.add_argument('--sphere_tracing_iters', type=int, default=15)
    parser.add_argument('--sdf_threshold', type=float, default=5e-5)

    parser.add_argument('--n_secant_steps', type=int, default=8)
    parser.add_argument('--n_steps', type=int, default=100)
    
    parser.add_argument('--samp_indirect', type=int, default=1)
    parser.add_argument('--precompute_epoch', type=int, default=10086)
    parser.add_argument('--eik_std', type=float, default=1e-2)
    parser.add_argument('--progressive_train', action='store_true')


    '''Test options'''
    # if --test is open
    parser.add_argument('--num_test', type=int, default=1, help = 'num meshes to generate for test' )
    parser.add_argument('--num_gen_mesh_test', type=int, default=1, help = 'num meshes to generate for test' )
    parser.add_argument('--test_id', type=str, default='default', help = 'test experiment ID. the experiment dir will be set as "./checkpoint/id/"')
    parser.add_argument('--test_ckpt_name', type=str, default='model_weights_G', help = 'test checkpoint name.')
    parser.add_argument('--ref_ids', type=str, default='0', help='test ref ids')
    parser.add_argument('--output_all', action='store_true', help='open this to output the full image')
    parser.add_argument('--output_levels', nargs='+', default=[0], type=float, help='open this to output the full image')
    parser.add_argument('--gen_normal', action='store_true', help='to generate normal from sdf')
    parser.add_argument('--gen_sdf_img', action='store_true', help='to generate sdf img')
    parser.add_argument('--use_octree', action='store_true', help='use octree to speed up marching cube')
    parser.add_argument('--test_samples', type=int, default=-1, help='test how many samples, -1 means all')
    parser.add_argument('--mc_batch_pts', type=int, default=20000, help='test how many samples, -1 means all')
    parser.add_argument('--test_date', type=str, default=None, help='test how many samples, -1 means all')
    parser.add_argument('--test_subject', type=int, default=0, help='test how many samples, -1 means all')
    parser.add_argument('--test_all_objects', action='store_true', help='use octree to speed up marching cube')
    parser.add_argument('--vis_level_set', action='store_true', help='use octree to speed up marching cube')

    '''Loss options'''
    parser.add_argument('--use_geo_normal_loss', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--use_align_loss', action='store_true', help='use align loss for regular sdf')
    parser.add_argument('--use_depth_smooth_loss', action='store_true', help='use smooth loss for regular albedo')
    parser.add_argument('--use_spec_smooth_loss', action='store_true', help='use smooth loss for regular albedo')
    parser.add_argument('--use_alb_smooth_loss', action='store_true', help='use smooth loss for regular albedo')
    parser.add_argument('--use_alb_sparse_loss', action='store_true', help='use smooth loss for regular albedo')
    parser.add_argument('--use_rough_smooth_loss', action='store_true', help='use smooth loss for regular albedo')
    parser.add_argument('--use_curvature_loss', action='store_true', help='use curvature loss for regular sdf')
    parser.add_argument('--use_backnormal_loss', action='store_true', help='use curvature loss for regular sdf')
    parser.add_argument('--use_adamW', action='store_true', help='use curvature loss for regular sdf')
    parser.add_argument('--optimize_pose', action='store_true', help='use curvature loss for regular sdf')
    parser.add_argument('--opt_pose_epoch', type=int, default=1000, help='when to start pose optimize')
    parser.add_argument('--sample_patch', action='store_true', help='use vgg loss for patch loss')


    parser.add_argument('--use_positional_encoding', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--multires',  type=int, default=6, help='use normal loss for occupancy network')
    parser.add_argument('--random_sample', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_original_img', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_mask', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_dist', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_dir', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_bound', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--feed_view_dir', action='store_true', help='use normal loss for occupancy network')
    parser.add_argument('--use_linear_z', action='store_true', help='use linear z in projection')
    parser.add_argument('--use_cosine_loss', action='store_true', help='use adversarial loss in total generation')
    parser.add_argument('--use_reg_second_order', action='store_true', help='use adversarial loss in total generation')
    parser.add_argument('--use_multi_HG_loss', action='store_true', help='use adversarial loss in total generation')

    parser.add_argument('--init_k', type=float, default=5.0, help='init k for bce loss')
    parser.add_argument('--intensity', type=float, default=1.0, help='init intensity for flash light')
    parser.add_argument('--init_intensity', type=float, default=1.0, help='init intensity for flash light')
    parser.add_argument('--k_type', type=str, default='exp', help='raw k multiply bce or exp(k) multi bce')
    parser.add_argument('--lambda_g1', type=float, default=1.0, help='sdf=0 loss on surface')
    parser.add_argument('--lambda_g1_init', type=float, default=1.0, help='sdf=0 loss on surface')
    parser.add_argument('--lambda_g1_max', type=float, default=15.0, help='sdf=0 loss on surface')
    parser.add_argument('--lambda_g2', type=float, default=1.0, help='gradient of sdf on surface = normal')
    parser.add_argument('--lambda_g1_end', type=float, default=15.0, help='gradient of sdf on surface = normal')
    parser.add_argument('--lambda_reg', type=float, default=0.1, help='L2 loss')
    parser.add_argument('--lambda_reg_alpha', default=1, type=float, help='weight decay alpha')
    parser.add_argument('--lambda_reg_milestone', nargs='+', default=[1000, 2000, 4000, 8000, 10000, 12000, 15000, 20000, 25000], type=int, help='weight decay steps')

    parser.add_argument('--lambda_reg_2', type=float, default=0.1, help='L2 loss for 2-nd grad for sdf')
    parser.add_argument('--lambda_sign', type=float, default=0.2, help='GAN loss weight')
    parser.add_argument('--lambda_sdf', type=float, default=0, help='sdf l2 loss')
    parser.add_argument('--lambda_mask', type=float, default=1, help='GAN loss weight')
    parser.add_argument('--lambda_align', type=float, default=0.01, help='align loss weight')
    parser.add_argument('--lambda_smooth_depth', type=float, default=0.1, help='smooth loss weight')
    parser.add_argument('--lambda_smooth_albedo', type=float, default=0.01, help='smooth loss weight')
    parser.add_argument('--lambda_sparse_albedo', type=float, default=0.001, help='smooth loss weight')
    parser.add_argument('--lambda_smooth_rough', type=float, default=0.01, help='smooth loss weight')
    parser.add_argument('--lambda_smooth_spec', type=float, default=0.01, help='smooth loss weight')
    parser.add_argument('--lambda_curvature', type=float, default=0.01, help='smooth loss weight')
    parser.add_argument('--lambda_pose', type=float, default=0, help='pose refine weight')
    parser.add_argument('--lambda_mask_alpha', default=1, type=float, help='weight decay alpha')
    parser.add_argument('--lambda_mask_milestone', nargs='+', default=[1000, 2000, 4000, 8000, 10000, 12000, 15000, 20000, 25000], type=int, help='weight decay steps')
    parser.add_argument('--lambda_albedo', type=float, default=0, help='GAN loss weight')
    parser.add_argument('--lambda_normal', type=float, default=0, help='GAN loss weight')
    parser.add_argument('--lambda_albedo_reg', type=float, default=0, help='albedo loss regularization')
    parser.add_argument('--lambda_vgg', type=float, default=0, help='GAN loss weight')
    parser.add_argument('--lambda_ssim', type=float, default=0, help='GAN loss weight')
    parser.add_argument('--lambda_recon', type=float, default=1, help='GAN loss weight')
    parser.add_argument('--lambda_backnormal', type=float, default=0.1, help='GAN loss weight')

    parser.add_argument('--lambda_reg_finetune', type=float, default=0, help='finetune regulariaztion loss weight')

    parser.add_argument('--color_loss_type', type=str, default='l1', help='raw k multiply bce or exp(k) multi bce')


    opt = parser.parse_args()
    return opt 